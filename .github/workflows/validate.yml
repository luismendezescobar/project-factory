name: 'validate code'
env:
  GROUP_FOUND: 777

on:
  pull_request:
    branches:
    - 'main'
jobs:
  job1-validate:
    permissions: write-all       #permissions for the GITHUB-TOKEN
#      id-token: write
#      contents: read
#      issues: write      

    runs-on: 'ubuntu-latest'
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2.5.0

    # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3      

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1.1.0'

    - name: Install dependencies for python scripts
      run: |
        sudo apt-get install -y python3-pip
        pip3 install -r helpers/preconditions/requirements.txt

    - name: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: ${{ secrets.PROVIDER_NAME }} # this is the output provider_name from the TF module        
        service_account: ${{ secrets.SA_EMAIL }} # this is a SA email configured using the TF module with access to YOUR-GCS-BUCKET

    - name: 'check if scripts is there'
      run: ls ./

    - name: 'run validation project script'
      run: ./helpers/preconditions/validate_projects.py

    - name: 'print value of GROUP_FOUND file'
      run: |
        echo "This is the value of result.txt file:"
        cat ./result.txt
        result_var=$(cat ./result.txt)
        file_details=$(cat ./file_details.txt)
        echo $my_var        
        echo "RESULT_VAR=$result_var" >> $GITHUB_ENV
       #echo "FILE_DETAILS=$file_details" >> $GITHUB_ENV

    - name: 'check the value of ENV variables'
      run: |
        echo "Group found value"
        echo ${{ env.RESULT_VAR }}
        echo "Group info"
        echo ${{ env.FILE_DETAILS }}

    - name: Create comment
      if: ${{ env.RESULT_VAR == 1 }}
      uses: mshick/add-pr-comment@v2
      with:
        message: |
          Failure, a project file is not valid. Go to actions tab for more details. ‚ùåüòï          
        allow-repeats : true

    - name: Create comment 2
      if: ${{ env.RESULT_VAR == 1 }}
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |          
          const output = `#### Script Validation ü§ñ`
          <details><summary>Validation Output</summary>
          \`\`\`\n          
          
          \`\`\`
          </details>

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })          

    - name: 'check validation'
      if: ${{ env.RESULT_VAR == 1 }}
      uses: actions/github-script@v6.3.3
      with:
        script: |
            core.setFailed('The project file is not valid: ${{ env.FILE_DETAILS }}')

    # Run Terraform init
    - name: Terraform Init
      id: init
      if: success()
      run: |
        cd terra-module
        terraform init 

    # Run a Terraform validate
    - name: Terraform validate
      id: validate
      if: success()       #it means run this step even either the previous step was success or failure   
      run: |
        cd terra-module
        terraform validate -no-color

    - name: Create comment
      if: failure()
      uses: mshick/add-pr-comment@v2
      with:
        message: |
          terraform validate failed. Go to actions tab for more details. ‚ùåüòï
        allow-repeats : true

    # Run a Terraform plan
    - name: Terraform plan
      id: plan
      if: success() 
      run: |
        cd terra-module
        terraform plan -no-color -out=plan.tmp       
        terraform show -no-color plan.tmp >${GITHUB_WORKSPACE}/plan.out

    - name: Terraform - Show Plan in PR
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
          const run_link = '<a href="' + run_url + '">Actions</a>.'
          const fs = require('fs')
          const plan_file = fs.readFileSync('plan.out', 'utf8')          
          const plan = plan_file.length > 100000 ? "..." + plan_file.toString().substring(plan_file.length - 100000) : plan_file
          const truncated_message = plan_file.length > 100000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${plan}
          \`\`\`
          
          </details>
          ${truncated_message}

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })