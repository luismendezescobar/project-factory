name: 'validate code'
env:
  GROUP_FOUND: 777

on:
  pull_request:
    branches:
    - 'develop'
jobs:
  job1-validate:
    permissions: write-all       #permissions for the GITHUB-TOKEN
#      id-token: write
#      contents: read
#      issues: write      

    runs-on: 'ubuntu-latest'
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2.5.0

    # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3      

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'

    - name: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        workload_identity_provider: ${{ secrets.PROVIDER_NAME }} # this is the output provider_name from the TF module        
        service_account: ${{ secrets.SA_EMAIL }} # this is a SA email configured using the TF module with access to YOUR-GCS-BUCKET

    - name: 'check if scripts is there'
      run: ls ./terra-module/

    - name: 'run validation group script'
      run: sh ./terra-module/validate-group-exists.sh

    - name: 'print value of GROUP_FOUND file'
      run: |
        echo "This is the value of group_found.txt file:"
        cat ./terra-module/group_found.txt
        my_var=$(cat ./terra-module/group_found.txt)
        echo $my_var

    - name: 'Group exists check validation'
      env:
        GROUP_FOUND: $(cat ./terra-module/group_found.txt)
      run: echo "Group found value ${{ env.GROUP_fOUND }}"
      if: ${{ env.GROUP_FOUND == 0 }}
      uses: actions/github-script@v3
      with:
        script: |
            core.setFailed('Some group doesn't exist')

    # Run Terraform init
    - name: Terraform Init
      id: init
      if: success()
      run: |
        cd terra-module
        terraform init 

    # Run a Terraform validate
    - name: Terraform validate
      id: validate
      if: success()       #it means run this step even either the previous step was success or failure   
      run: |
        cd terra-module
        terraform validate -no-color

    # Run a Terraform plan
    - name: Terraform plan
      id: plan
      run: |
        cd terra-module
        terraform plan -no-color

    # Add a comment to pull requests with plan results
    - name: Update Pull Request
      uses: actions/github-script@v6
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
